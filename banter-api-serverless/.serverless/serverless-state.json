{
  "service": {
    "service": "banter-api-serverless",
    "serviceObject": {
      "name": "banter-api-serverless"
    },
    "provider": {
      "stage": "dev",
      "region": "us-east-1",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._'\",\\-\\/\\(\\)]+?)}",
      "name": "aws",
      "runtime": "python3.6",
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "AccelerateConfiguration": {
                "AccelerationStatus": "Suspended"
              }
            }
          },
          "HelloWorldLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/banter-api-serverless-dev-HelloWorld"
            }
          },
          "AddAccountLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/banter-api-serverless-dev-AddAccount"
            }
          },
          "AuthorizerFuncLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/banter-api-serverless-dev-AuthorizerFunc"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "banter-api-serverless",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/banter-api-serverless-dev-HelloWorld:*"
                          },
                          {
                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/banter-api-serverless-dev-AddAccount:*"
                          },
                          {
                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/banter-api-serverless-dev-AuthorizerFunc:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/banter-api-serverless-dev-HelloWorld:*:*"
                          },
                          {
                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/banter-api-serverless-dev-AddAccount:*:*"
                          },
                          {
                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/banter-api-serverless-dev-AuthorizerFunc:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "banter-api-serverless",
                    "dev",
                    "us-east-1",
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "HelloWorldLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/banter-api-serverless/dev/1519773513695-2018-02-27T23:18:33.695Z/HelloWorld.zip"
              },
              "FunctionName": "banter-api-serverless-dev-HelloWorld",
              "Handler": "lambdas/hello-world/handler.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs6.10",
              "Timeout": 6
            },
            "DependsOn": [
              "HelloWorldLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "HelloWorldLambdaVersionKH3NEm66K9SsQMIY1GXN9rr1gCdC5DaJ0CzyNzEotSE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HelloWorldLambdaFunction"
              },
              "CodeSha256": "tFploQCazqXyC1L9dipk1C6wl0K3Rw4GIUVCwUmTMbo="
            }
          },
          "AddAccountLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/banter-api-serverless/dev/1519773513695-2018-02-27T23:18:33.695Z/AddAccount.zip"
              },
              "FunctionName": "banter-api-serverless-dev-AddAccount",
              "Handler": "lambdas/account/add/handler.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python3.6",
              "Timeout": 6
            },
            "DependsOn": [
              "AddAccountLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "AddAccountLambdaVersionoOlo3SVeOyegG2nv8ZuEm88jZl3Zhn9gU5Rxv0ioP0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddAccountLambdaFunction"
              },
              "CodeSha256": "pWm0e68HmVKoXQMkUVQwveSBlJ9MGj4M7XyHOlC4eOc="
            }
          },
          "AuthorizerFuncLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/banter-api-serverless/dev/1519773513695-2018-02-27T23:18:33.695Z/AuthorizerFunc.zip"
              },
              "FunctionName": "banter-api-serverless-dev-AuthorizerFunc",
              "Handler": "lambdas/authorizer/handler.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs6.10",
              "Timeout": 6
            },
            "DependsOn": [
              "AuthorizerFuncLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "AuthorizerFuncLambdaVersionGyWhzTMRi8mcN6vHsR3XqXQyYluLa1ERlUjHyT3utEE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuthorizerFuncLambdaFunction"
              },
              "CodeSha256": "G04xnNG92LYkSymInleiTFjoIcwo0x2YvquzBNar8yo="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-banter-api-serverless",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceHello": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "hello",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAccount": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "account",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAccountAdd": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAccount"
              },
              "PathPart": "add",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHelloGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHello"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerFuncApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HelloWorldLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthorizerFuncApiGatewayAuthorizer"
          },
          "ApiGatewayMethodAccountAddPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAccountAdd"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerFuncApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddAccountLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthorizerFuncApiGatewayAuthorizer"
          },
          "AuthorizerFuncApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "IdentitySource": "method.request.header.Authorization",
              "Name": "AuthorizerFunc",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AuthorizerFuncLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "TOKEN"
            }
          },
          "ApiGatewayDeployment1519773513737": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodHelloGet",
              "ApiGatewayMethodAccountAddPost"
            ]
          },
          "HelloWorldLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HelloWorldLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthorizerFuncLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthorizerFuncLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "AddAccountLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddAccountLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "HelloWorldLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HelloWorldLambdaVersionKH3NEm66K9SsQMIY1GXN9rr1gCdC5DaJ0CzyNzEotSE"
            }
          },
          "AddAccountLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddAccountLambdaVersionoOlo3SVeOyegG2nv8ZuEm88jZl3Zhn9gU5Rxv0ioP0"
            }
          },
          "AuthorizerFuncLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuthorizerFuncLambdaVersionGyWhzTMRi8mcN6vHsR3XqXQyYluLa1ERlUjHyT3utEE"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.us-east-1.amazonaws.com/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "AccelerateConfiguration": {
                "AccelerationStatus": "Suspended"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "pythonRequirements": {
        "dockerizePip": "non-linux"
      }
    },
    "plugins": [
      "serverless-python-requirements"
    ],
    "functions": {
      "HelloWorld": {
        "runtime": "nodejs6.10",
        "handler": "lambdas/hello-world/handler.handler",
        "package": {
          "artifact": "C:\\Users\\evan.carlin\\Documents\\personal\\banter\\infrastructure\\banter-api-serverless\\.serverless\\HelloWorld.zip"
        },
        "events": [
          {
            "http": {
              "path": "hello",
              "method": "get",
              "authorizer": {
                "name": "AuthorizerFunc",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerFuncLambdaFunction",
                    "Arn"
                  ]
                },
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "banter-api-serverless-dev-HelloWorld",
        "vpc": {}
      },
      "AddAccount": {
        "runtime": "python3.6",
        "handler": "lambdas/account/add/handler.handler",
        "package": {
          "artifact": "C:\\Users\\evan.carlin\\Documents\\personal\\banter\\infrastructure\\banter-api-serverless\\.serverless\\AddAccount.zip"
        },
        "events": [
          {
            "http": {
              "path": "account/add",
              "method": "post",
              "authorizer": {
                "name": "AuthorizerFunc",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerFuncLambdaFunction",
                    "Arn"
                  ]
                },
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "banter-api-serverless-dev-AddAccount",
        "vpc": {}
      },
      "AuthorizerFunc": {
        "runtime": "nodejs6.10",
        "handler": "lambdas/authorizer/handler.handler",
        "package": {
          "artifact": "C:\\Users\\evan.carlin\\Documents\\personal\\banter\\infrastructure\\banter-api-serverless\\.serverless\\AuthorizerFunc.zip"
        },
        "events": [],
        "name": "banter-api-serverless-dev-AuthorizerFunc",
        "vpc": {}
      }
    }
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/banter-api-serverless/dev/1519773513695-2018-02-27T23:18:33.695Z",
    "artifact": ""
  }
}